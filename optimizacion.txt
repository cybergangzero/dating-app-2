Ya optimize lo del chat del usuario, ahora se renderizan los mensajes desde el cliente.
Falta lo relacionado a la busqueda, en este caso, tambien se renderizaran los resultados de busqueda de lado del cliente,
el proceso es sencillo, simplemente envio los datos obtenidos de la base de datos y el codigo javascript del lado 
del cliente se encarga de renderizar. Si ya hay resultados, se borran los resultados existentes (eliminandolos como nodos 
hijos de la tabla) y se sustituyen por los nuevos.
Cabe destacar, que en el modulo de buqueda de usuarios, no utilizare el modulo "obtener foto de perfil del usuario". Esto
sera asi por que con este metodo, se necesita hacer un bucle que obtenga el sexo del usuario y su correspondiente
foto de usuario, conduciendo a un posible cuello de botella. Es mejor, modificar la base tabla principal de usuarios,
para que tambien tenga la columna "ruta de foto de perfil del usuario", con esto, con tan solo una consulta podre
obtener las fotos de perfil de los usuarios y enviarlas al cliente junto con los demas datos para que el mismo renderize.
Una cosa a tener en cuenta, es el hecho de que al momento de registrar el usuario, su ruta de foto de perfil sera su
correspondiente avatar en funcion de su sexo, y, cuando un usuario cambie su foto de perfi, entonces tambien
se hara una consulta para modificar la ruta actual de foto de perfil de usuario de ese usuario en la tabla usuarios.
Un problema de este enfoque seria que el usuario podria eliminar una foto, y esa foto podria ser su foto de perfil.
Pero la solucion es sencilla, en el modulo de eliminacion de fotos, se comprueba una condicion de si es la foto de perfil 
del usuario (por medio de la etiqueta). Si lo es, se cambia la foto de perfil del usuario a su avatar correspondiente.
Creo que con esto, he logrado optimizar la aplicacion, asi, si llego a tener 2000 peticiones concurrentes, no
tendre problemas serios de rendimiento.